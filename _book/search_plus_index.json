{"./":{"url":"./","title":"xxx","keywords":"","body":"xxx 自2017年毕业后至今已工作两年有余，是该把自己的成长点滴做些记录人生路很长，是一本厚书，此书很大，取名xxx，致敬逝去的青春和时间 个人能力有限，如有纰漏，望各位看官批评指正。 2019.12.10于上海 Copyright © Jason 2019 all right reserved，powered by Gitbook本书发布时间： 2019-12-11 21:53:30 "},"computer_system/":{"url":"computer_system/","title":"计算机系统","keywords":"","body":"Hello World Copyright © Jason 2019 all right reserved，powered by Gitbook本书发布时间： 2019-12-08 23:47:36 "},"computer_system/data_structure_and_algorithms/":{"url":"computer_system/data_structure_and_algorithms/","title":"数据结构与算法","keywords":"","body":"Hello, data structure and algorithms Copyright © Jason 2019 all right reserved，powered by Gitbook本书发布时间： 2019-12-08 23:51:57 "},"computer_system/data_structure_and_algorithms/double_pointers/contents.html":{"url":"computer_system/data_structure_and_algorithms/double_pointers/contents.html","title":"双指针","keywords":"","body":"双指针 双指针是指使用两个指针对线性数据结构进行遍历/搜索的方法。 双指针方法包括： 首尾指针 快慢指针 前后指针 双指针方法解析 首尾指针 首指针从线性表从前往后遍历，尾指针从线性表尾部往前遍历。 [剑指offer-57] 和为s的数字 输入一个递增排序的数组和一个数字s，在数组总查找两个数，使得他们的和正好是s。 如果有多对数字的和等于s，则输出任意一对即可。 如：输入数组[1, 2, 4, 7, 11, 15]和数字15，由于4 + 11 = 15，则输出[4, 11]即可 采用首尾指针的双指针方法，如图所示： 若nums[front] + nums[tail] 若nums[front] + nums[tail] > s，则说明nums[tail]太大了，需要减小，故tail--; 若nums[front] + nums[tail] == s，得到解； 结束条件front >= tail，无解 /* front-tail pointers to solve the problem. */ int target_sum(int *nums, int nums_size, int target, int *ret_array) { int front = 0; int tail = nums_size - 1; if ((!nums) || (!ret_array) || (nums_size target) { /* decrease left part */ tail--; } } return (front 快慢指针 前后指针 Copyright © Jason 2019 all right reserved，powered by Gitbook本书发布时间： 2019-12-13 00:25:21 "}}